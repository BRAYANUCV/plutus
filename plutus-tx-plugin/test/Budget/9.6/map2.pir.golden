let
  data Unit | Unit_match where
    Unit : Unit
  data (Tuple2 :: * -> * -> *) a b | Tuple2_match where
    Tuple2 : a -> b -> Tuple2 a b
in
letrec
  data (List :: * -> *) a | List_match where
    Nil : List a
    Cons : a -> List a -> List a
in
letrec
  !go : list (pair data data) -> List (Tuple2 integer bytestring)
    = \(xs : list (pair data data)) ->
        caseList
          {pair data data}
          {Unit -> List (Tuple2 integer bytestring)}
          (\(ds : Unit) -> Nil {Tuple2 integer bytestring})
          (\(x : pair data data) (xs : list (pair data data)) (ds : Unit) ->
             Cons
               {Tuple2 integer bytestring}
               (Tuple2
                  {integer}
                  {bytestring}
                  (unIData (fstPair {data} {data} x))
                  (unBData (sndPair {data} {data} x)))
               (go xs))
          xs
          Unit
in
letrec
  !go : list (pair data data) -> list (pair data data) -> list (pair data data)
    = \(acc : list (pair data data)) (xs : list (pair data data)) ->
        caseList
          {pair data data}
          {Unit -> list (pair data data)}
          (\(ds : Unit) -> acc)
          (\(x : pair data data) (xs : list (pair data data)) (ds : Unit) ->
             go (mkCons {pair data data} x acc) xs)
          xs
          Unit
in
let
  data (Maybe :: * -> *) a | Maybe_match where
    Just : a -> Maybe a
    Nothing : Maybe a
  data Bool | Bool_match where
    True : Bool
    False : Bool
in
letrec
  !goList : List (Tuple2 data data) -> list (pair data data)
    = \(ds : List (Tuple2 data data)) ->
        List_match
          {Tuple2 data data}
          ds
          {list (pair data data)}
          []
          (\(d : Tuple2 data data) (ds : List (Tuple2 data data)) ->
             mkCons
               {pair data data}
               (Tuple2_match
                  {data}
                  {data}
                  d
                  {pair data data}
                  (\(d : data) (d : data) -> mkPairData d d))
               (goList ds))
in
let
  !unsafeFromList :
     all k a.
       (\a -> a -> data) k ->
       (\a -> a -> data) a ->
       List (Tuple2 k a) ->
       (\k a -> list (pair data data)) k a
    = /\k a ->
        \(`$dToData` : (\a -> a -> data) k)
         (`$dToData` : (\a -> a -> data) a) ->
          letrec
            !go : List (Tuple2 k a) -> List (Tuple2 data data)
              = \(ds : List (Tuple2 k a)) ->
                  List_match
                    {Tuple2 k a}
                    ds
                    {all dead. List (Tuple2 data data)}
                    (/\dead -> Nil {Tuple2 data data})
                    (\(x : Tuple2 k a) (xs : List (Tuple2 k a)) ->
                       /\dead ->
                         Cons
                           {Tuple2 data data}
                           (Tuple2_match
                              {k}
                              {a}
                              x
                              {Tuple2 data data}
                              (\(k : k) (a : a) ->
                                 Tuple2
                                   {data}
                                   {data}
                                   (`$dToData` k)
                                   (`$dToData` a)))
                           (go xs))
                    {all dead. dead}
          in
          \(eta : List (Tuple2 k a)) -> goList (go eta)
in
\(n : integer) ->
  let
    !nt : list (pair data data)
      = unsafeFromList
          {integer}
          {bytestring}
          (\(i : integer) -> iData i)
          bData
          ((let
               a = Tuple2 integer bytestring
             in
             \(g : all b. (a -> b -> b) -> b -> b) ->
               g {List a} (\(ds : a) (ds : List a) -> Cons {a} ds ds) (Nil {a}))
             (/\a ->
                \(c : Tuple2 integer bytestring -> a -> a) (n : a) ->
                  c
                    (Tuple2 {integer} {bytestring} (addInteger 3 n) #5448524545)
                    (c
                       (Tuple2
                          {integer}
                          {bytestring}
                          (addInteger 4 n)
                          #464f5552)
                       (c
                          (Tuple2
                             {integer}
                             {bytestring}
                             (addInteger 6 n)
                             #534958)
                          (c
                             (Tuple2
                                {integer}
                                {bytestring}
                                (addInteger 7 n)
                                #534556454e)
                             n)))))
  in
  letrec
    !go : list (pair data data) -> list (pair data data)
      = \(xs : list (pair data data)) ->
          caseList
            {pair data data}
            {Unit -> list (pair data data)}
            (\(ds : Unit) -> [])
            (\(x : pair data data) (xs : list (pair data data)) (ds : Unit) ->
               let
                 !v' : data = sndPair {data} {data} x
                 !k' : data = fstPair {data} {data} x
               in
               letrec
                 !go : list (pair data data) -> Maybe data
                   = \(xs : list (pair data data)) ->
                       caseList
                         {pair data data}
                         {Unit -> Maybe data}
                         (\(ds : Unit) -> Nothing {data})
                         (\(x : pair data data)
                           (xs : list (pair data data))
                           (ds : Unit) ->
                            Bool_match
                              (ifThenElse
                                 {Bool}
                                 (equalsData k' (fstPair {data} {data} x))
                                 True
                                 False)
                              {all dead. Maybe data}
                              (/\dead -> Just {data} (sndPair {data} {data} x))
                              (/\dead -> go xs)
                              {all dead. dead})
                         xs
                         Unit
               in
               Maybe_match
                 {data}
                 (go nt)
                 {all dead. list (pair data data)}
                 (\(r : data) ->
                    /\dead ->
                      mkCons
                        {pair data data}
                        (mkPairData
                           k'
                           (bData (appendByteString (unBData v') (unBData r))))
                        (go xs))
                 (/\dead -> mkCons {pair data data} (mkPairData k' v') (go xs))
                 {all dead. dead})
            xs
            Unit
  in
  let
    !nt : list (pair data data)
      = unsafeFromList
          {integer}
          {bytestring}
          (\(i : integer) -> iData i)
          bData
          ((let
               a = Tuple2 integer bytestring
             in
             \(g : all b. (a -> b -> b) -> b -> b) ->
               g {List a} (\(ds : a) (ds : List a) -> Cons {a} ds ds) (Nil {a}))
             (/\a ->
                \(c : Tuple2 integer bytestring -> a -> a) (n : a) ->
                  c
                    (Tuple2 {integer} {bytestring} (addInteger 1 n) #6f6e65)
                    (c
                       (Tuple2 {integer} {bytestring} (addInteger 2 n) #74776f)
                       (c
                          (Tuple2
                             {integer}
                             {bytestring}
                             (addInteger 3 n)
                             #7468726565)
                          (c
                             (Tuple2
                                {integer}
                                {bytestring}
                                (addInteger 4 n)
                                #666f7572)
                             (c
                                (Tuple2
                                   {integer}
                                   {bytestring}
                                   (addInteger 5 n)
                                   #66697665)
                                n))))))
  in
  letrec
    !go : list (pair data data) -> list (pair data data)
      = \(xs : list (pair data data)) ->
          caseList
            {pair data data}
            {Unit -> list (pair data data)}
            (\(ds : Unit) -> [])
            (\(x : pair data data) (xs : list (pair data data)) (ds : Unit) ->
               let
                 !tl' : list (pair data data) = go xs
               in
               Bool_match
                 (let
                   !k : data = fstPair {data} {data} x
                 in
                 letrec
                   !go : list (pair data data) -> Bool
                     = \(xs : list (pair data data)) ->
                         caseList
                           {pair data data}
                           {Unit -> Bool}
                           (\(ds : Unit) -> False)
                           (\(x : pair data data)
                             (xs : list (pair data data))
                             (ds : Unit) ->
                              Bool_match
                                (ifThenElse
                                   {Bool}
                                   (equalsData k (fstPair {data} {data} x))
                                   True
                                   False)
                                {all dead. Bool}
                                (/\dead -> True)
                                (/\dead -> go xs)
                                {all dead. dead})
                           xs
                           Unit
                 in
                 go nt)
                 {all dead. list (pair data data)}
                 (/\dead -> tl')
                 (/\dead -> mkCons {pair data data} x tl')
                 {all dead. dead})
            xs
            Unit
  in
  let
    !nt : list (pair data data)
      = let
        !rs' : list (pair data data) = go nt
        !ls' : list (pair data data) = go nt
      in
      go rs' ls'
  in
  (let
      a = Tuple2 integer bytestring
    in
    /\b ->
      \(f : a -> b) ->
        letrec
          !go : List a -> List b
            = \(ds : List a) ->
                List_match
                  {a}
                  ds
                  {all dead. List b}
                  (/\dead -> Nil {b})
                  (\(x : a) (xs : List a) -> /\dead -> Cons {b} (f x) (go xs))
                  {all dead. dead}
        in
        \(eta : List a) -> go eta)
    {Tuple2 integer string}
    (\(ds : Tuple2 integer bytestring) ->
       Tuple2_match
         {integer}
         {bytestring}
         ds
         {Tuple2 integer string}
         (\(k : integer) (v : bytestring) ->
            Tuple2 {integer} {string} k (decodeUtf8 v)))
    (go nt)