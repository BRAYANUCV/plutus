let
  data Unit | Unit_match where
    Unit : Unit
  data (Tuple2 :: * -> * -> *) a b | Tuple2_match where
    Tuple2 : a -> b -> Tuple2 a b
  data Bool | Bool_match where
    True : Bool
    False : Bool
  !caseData' :
     all r.
       (integer -> list data -> r) ->
       (list (pair data data) -> r) ->
       (list data -> r) ->
       (integer -> r) ->
       (bytestring -> r) ->
       data ->
       r
    = caseData
  !caseList' : all a r. r -> (a -> list a -> r) -> list a -> r = caseList
  !equalsInteger : integer -> integer -> bool = equalsInteger
  data (Maybe :: * -> *) a | Maybe_match where
    Just : a -> Maybe a
    Nothing : Maybe a
  !ifThenElse : all a. bool -> a -> a -> a = ifThenElse
  ~`$fFromDataTuple2_$cfromBuiltinData` :
     all a b.
       (\a -> data -> Maybe a) a ->
       (\a -> data -> Maybe a) b ->
       data ->
       Maybe (Tuple2 a b)
    = /\a b ->
        \(`$dFromData` : (\a -> data -> Maybe a) a)
         (`$dFromData` : (\a -> data -> Maybe a) b)
         (d : data) ->
          let
            !d : data = d
          in
          caseData'
            {Maybe (Tuple2 a b)}
            (\(index : integer) ->
               let
                 !index : integer = index
               in
               \(args : list data) ->
                 let
                   !args : list data = args
                   !b : bool = equalsInteger 0 index
                 in
                 Bool_match
                   (ifThenElse {Bool} b True False)
                   {all dead. Maybe (Tuple2 a b)}
                   (/\dead ->
                      Maybe_match
                        {Tuple2 data (list data)}
                        (caseList'
                           {data}
                           {Unit -> Maybe (Tuple2 data (list data))}
                           (\(ds : Unit) -> Nothing {Tuple2 data (list data)})
                           (\(x : data) ->
                              let
                                !x : data = x
                              in
                              \(xs : list data) ->
                                let
                                  !xs : list data = xs
                                in
                                \(ds : Unit) ->
                                  Just
                                    {Tuple2 data (list data)}
                                    (Tuple2 {data} {list data} x xs))
                           args
                           Unit)
                        {all dead. Maybe (Tuple2 a b)}
                        (\(ds : Tuple2 data (list data)) ->
                           /\dead ->
                             Tuple2_match
                               {data}
                               {list data}
                               ds
                               {Maybe (Tuple2 a b)}
                               (\(ds : data) (ds : list data) ->
                                  let
                                    !l : list data = ds
                                  in
                                  Maybe_match
                                    {a}
                                    (`$dFromData` ds)
                                    {all dead. Maybe (Tuple2 a b)}
                                    (\(arg : a) ->
                                       /\dead ->
                                         Maybe_match
                                           {data}
                                           (caseList'
                                              {data}
                                              {Unit -> Maybe data}
                                              (\(ds : Unit) -> Nothing {data})
                                              (\(x : data) ->
                                                 let
                                                   !x : data = x
                                                 in
                                                 \(xs : list data)
                                                  (ds : Unit) ->
                                                   Just {data} x)
                                              l
                                              Unit)
                                           {all dead. Maybe (Tuple2 a b)}
                                           (\(ds : data) ->
                                              /\dead ->
                                                Maybe_match
                                                  {b}
                                                  (`$dFromData` ds)
                                                  {all dead. Maybe (Tuple2 a b)}
                                                  (\(arg : b) ->
                                                     /\dead ->
                                                       Just
                                                         {Tuple2 a b}
                                                         (Tuple2
                                                            {a}
                                                            {b}
                                                            arg
                                                            arg))
                                                  (/\dead ->
                                                     Nothing {Tuple2 a b})
                                                  {all dead. dead})
                                           (/\dead -> Nothing {Tuple2 a b})
                                           {all dead. dead})
                                    (/\dead -> Nothing {Tuple2 a b})
                                    {all dead. dead}))
                        (/\dead -> Nothing {Tuple2 a b})
                        {all dead. dead})
                   (/\dead -> Nothing {Tuple2 a b})
                   {all dead. dead})
            (\(ds : list (pair data data)) -> Nothing {Tuple2 a b})
            (\(ds : list data) -> Nothing {Tuple2 a b})
            (\(ds : integer) -> Nothing {Tuple2 a b})
            (\(ds : bytestring) -> Nothing {Tuple2 a b})
            d
  ~`$fFromDataTuple2` :
     all a b.
       (\a -> data -> Maybe a) a ->
       (\a -> data -> Maybe a) b ->
       (\a -> data -> Maybe a) (Tuple2 a b)
    = `$fFromDataTuple2_$cfromBuiltinData`
  ~`$fFromDataInteger_$cfromBuiltinData` : data -> Maybe integer
    = \(d : data) ->
        let
          !d : data = d
        in
        caseData'
          {Maybe integer}
          (\(ds : integer) (ds : list data) -> Nothing {integer})
          (\(ds : list (pair data data)) -> Nothing {integer})
          (\(ds : list data) -> Nothing {integer})
          (\(i : integer) -> let !i : integer = i in Just {integer} i)
          (\(ds : bytestring) -> Nothing {integer})
          d
  ~`$fFromDataInteger` : (\a -> data -> Maybe a) integer
    = `$fFromDataInteger_$cfromBuiltinData`
  ~`$dFromData` : (\a -> data -> Maybe a) (Tuple2 integer integer)
    = `$fFromDataTuple2`
        {integer}
        {integer}
        `$fFromDataInteger`
        `$fFromDataInteger`
  ~fromBuiltinData : all a. (\a -> data -> Maybe a) a -> data -> Maybe a
    = /\a -> \(v : (\a -> data -> Maybe a) a) -> v
in
\(ds : data) ->
  let
    !ds : data = ds
  in
  fromBuiltinData {Tuple2 integer integer} `$dFromData` ds