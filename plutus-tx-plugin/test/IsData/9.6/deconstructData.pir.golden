let
  data (Tuple2 :: * -> * -> *) a b | Tuple2_match where
    Tuple2 : a -> b -> Tuple2 a b
  data Bool | Bool_match where
    True : Bool
    False : Bool
  !chooseList : all a b. list a -> b -> b -> b = chooseList
  !equalsInteger : integer -> integer -> bool = equalsInteger
  data (Maybe :: * -> *) a | Maybe_match where
    Just : a -> Maybe a
    Nothing : Maybe a
  !head : all a. list a -> a = headList
  !ifThenElse : all a. bool -> a -> a -> a = ifThenElse
  data (Delay :: * -> *) a | Delay_match where
    Delay : (all b. a) -> Delay a
  !chooseData : all a. data -> a -> a -> a -> a -> a -> a = chooseData
  !fst : all a b. pair a b -> a = fstPair
  !snd : all a b. pair a b -> b = sndPair
  !unsafeDataAsB : data -> bytestring = unBData
  !unsafeDataAsConstr : data -> pair integer (list data) = unConstrData
  !unsafeDataAsI : data -> integer = unIData
  !unsafeDataAsList : data -> list data = unListData
  !unsafeDataAsMap : data -> list (pair data data) = unMapData
  ~matchData' :
     all r.
       data ->
       (integer -> list data -> r) ->
       (list (pair data data) -> r) ->
       (list data -> r) ->
       (integer -> r) ->
       (bytestring -> r) ->
       r
    = /\r ->
        \(d : data) ->
          let
            !d : data = d
          in
          \(constrCase : integer -> list data -> r) ->
            let
              !constrCase : integer -> list data -> r = constrCase
            in
            \(mapCase : list (pair data data) -> r) ->
              let
                !mapCase : list (pair data data) -> r = mapCase
              in
              \(listCase : list data -> r) ->
                let
                  !listCase : list data -> r = listCase
                in
                \(iCase : integer -> r) ->
                  let
                    !iCase : integer -> r = iCase
                  in
                  \(bCase : bytestring -> r) ->
                    let
                      !bCase : bytestring -> r = bCase
                    in
                    Delay_match
                      {r}
                      (chooseData
                         {Delay r}
                         d
                         (Delay
                            {r}
                            (/\b ->
                               let
                                 !tup : pair integer (list data)
                                   = unsafeDataAsConstr d
                               in
                               constrCase
                                 (fst {integer} {list data} tup)
                                 (snd {integer} {list data} tup)))
                         (Delay {r} (/\b -> mapCase (unsafeDataAsMap d)))
                         (Delay {r} (/\b -> listCase (unsafeDataAsList d)))
                         (Delay {r} (/\b -> iCase (unsafeDataAsI d)))
                         (Delay {r} (/\b -> bCase (unsafeDataAsB d))))
                      {r}
                      (\(a : all b. r) -> a {unit})
  !tail : all a. list a -> list a = tailList
  ~`$fFromDataTuple2_$cfromBuiltinData` :
     all a b.
       (\a -> data -> Maybe a) a ->
       (\a -> data -> Maybe a) b ->
       data ->
       Maybe (Tuple2 a b)
    = /\a b ->
        \(`$dFromData` : (\a -> data -> Maybe a) a)
         (`$dFromData` : (\a -> data -> Maybe a) b)
         (d : data) ->
          let
            !d : data = d
          in
          matchData'
            {Maybe (Tuple2 a b)}
            d
            (\(index : integer) ->
               let
                 !index : integer = index
               in
               \(args : list data) ->
                 let
                   !args : list data = args
                   !b : bool = equalsInteger 0 index
                 in
                 Bool_match
                   (ifThenElse {Bool} b True False)
                   {all dead. Maybe (Tuple2 a b)}
                   (/\dead ->
                      Delay_match
                        {Maybe (Tuple2 data (list data))}
                        (chooseList
                           {data}
                           {Delay (Maybe (Tuple2 data (list data)))}
                           args
                           (Delay
                              {Maybe (Tuple2 data (list data))}
                              (/\b -> Nothing {Tuple2 data (list data)}))
                           (Delay
                              {Maybe (Tuple2 data (list data))}
                              (/\b ->
                                 let
                                   !h : data = head {data} args
                                   !t : list data = tail {data} args
                                 in
                                 Just
                                   {Tuple2 data (list data)}
                                   (Tuple2 {data} {list data} h t))))
                        {Maybe (Tuple2 a b)}
                        (\(a : all b. Maybe (Tuple2 data (list data))) ->
                           Maybe_match
                             {Tuple2 data (list data)}
                             (a {unit})
                             {all dead. Maybe (Tuple2 a b)}
                             (\(ds : Tuple2 data (list data)) ->
                                /\dead ->
                                  Tuple2_match
                                    {data}
                                    {list data}
                                    ds
                                    {Maybe (Tuple2 a b)}
                                    (\(ds : data) (ds : list data) ->
                                       let
                                         !l : list data = ds
                                       in
                                       Maybe_match
                                         {a}
                                         (`$dFromData` ds)
                                         {all dead. Maybe (Tuple2 a b)}
                                         (\(arg : a) ->
                                            /\dead ->
                                              Delay_match
                                                {Maybe data}
                                                (chooseList
                                                   {data}
                                                   {Delay (Maybe data)}
                                                   l
                                                   (Delay
                                                      {Maybe data}
                                                      (/\b -> Nothing {data}))
                                                   (Delay
                                                      {Maybe data}
                                                      (/\b ->
                                                         let
                                                           !h : data
                                                             = head {data} l
                                                           !ds : list data
                                                             = tail {data} l
                                                         in
                                                         Just {data} h)))
                                                {Maybe (Tuple2 a b)}
                                                (\(a : all b. Maybe data) ->
                                                   Maybe_match
                                                     {data}
                                                     (a {unit})
                                                     {all dead.
                                                        Maybe (Tuple2 a b)}
                                                     (\(ds : data) ->
                                                        /\dead ->
                                                          Maybe_match
                                                            {b}
                                                            (`$dFromData` ds)
                                                            {all dead.
                                                               Maybe
                                                                 (Tuple2 a b)}
                                                            (\(arg : b) ->
                                                               /\dead ->
                                                                 Just
                                                                   {Tuple2 a b}
                                                                   (Tuple2
                                                                      {a}
                                                                      {b}
                                                                      arg
                                                                      arg))
                                                            (/\dead ->
                                                               Nothing
                                                                 {Tuple2 a b})
                                                            {all dead. dead})
                                                     (/\dead ->
                                                        Nothing {Tuple2 a b})
                                                     {all dead. dead}))
                                         (/\dead -> Nothing {Tuple2 a b})
                                         {all dead. dead}))
                             (/\dead -> Nothing {Tuple2 a b})
                             {all dead. dead}))
                   (/\dead -> Nothing {Tuple2 a b})
                   {all dead. dead})
            (\(ds : list (pair data data)) -> Nothing {Tuple2 a b})
            (\(ds : list data) -> Nothing {Tuple2 a b})
            (\(ds : integer) -> Nothing {Tuple2 a b})
            (\(ds : bytestring) -> Nothing {Tuple2 a b})
  ~`$fFromDataTuple2` :
     all a b.
       (\a -> data -> Maybe a) a ->
       (\a -> data -> Maybe a) b ->
       (\a -> data -> Maybe a) (Tuple2 a b)
    = `$fFromDataTuple2_$cfromBuiltinData`
  ~`$fFromDataInteger_$cfromBuiltinData` : data -> Maybe integer
    = \(d : data) ->
        let
          !d : data = d
        in
        matchData'
          {Maybe integer}
          d
          (\(ds : integer) (ds : list data) -> Nothing {integer})
          (\(ds : list (pair data data)) -> Nothing {integer})
          (\(ds : list data) -> Nothing {integer})
          (\(i : integer) -> let !i : integer = i in Just {integer} i)
          (\(ds : bytestring) -> Nothing {integer})
  ~`$fFromDataInteger` : (\a -> data -> Maybe a) integer
    = `$fFromDataInteger_$cfromBuiltinData`
  ~`$dFromData` : (\a -> data -> Maybe a) (Tuple2 integer integer)
    = `$fFromDataTuple2`
        {integer}
        {integer}
        `$fFromDataInteger`
        `$fFromDataInteger`
  ~fromBuiltinData : all a. (\a -> data -> Maybe a) a -> data -> Maybe a
    = /\a -> \(v : (\a -> data -> Maybe a) a) -> v
in
\(ds : data) ->
  let
    !ds : data = ds
  in
  fromBuiltinData {Tuple2 integer integer} `$dFromData` ds