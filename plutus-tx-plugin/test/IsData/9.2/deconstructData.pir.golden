let
  data (Tuple2 :: * -> * -> *) a b | Tuple2_match where
    Tuple2 : a -> b -> Tuple2 a b
  !equalsInteger : integer -> integer -> bool = equalsInteger
  data (Maybe :: * -> *) a | Maybe_match where
    Just : a -> Maybe a
    Nothing : Maybe a
  !ifThenElse : all a. bool -> a -> a -> a = ifThenElse
  !matchData' :
     all r.
       data ->
       (integer -> list data -> r) ->
       (list (pair data data) -> r) ->
       (list data -> r) ->
       (integer -> r) ->
       (bytestring -> r) ->
       r
    = caseData
  data Unit | Unit_match where
    Unit : Unit
  !chooseList : all a b. list a -> b -> b -> b = chooseList
  !head : all a. list a -> a = headList
  !tail : all a. list a -> list a = tailList
  ~matchList : all a r. list a -> r -> (a -> list a -> r) -> r
    = /\a r ->
        \(l : list a) ->
          let
            !l : list a = l
          in
          \(nilCase : r) ->
            let
              !nilCase : r = nilCase
            in
            \(consCase : a -> list a -> r) ->
              let
                !consCase : a -> list a -> r = consCase
              in
              chooseList
                {a}
                {Unit -> r}
                l
                (\(ds : Unit) -> nilCase)
                (\(ds : Unit) -> consCase (head {a} l) (tail {a} l))
                Unit
  !unitval : unit = ()
  ~`$fFromDataTuple2_$cfromBuiltinData` :
     all a b.
       (\a -> data -> Maybe a) a ->
       (\a -> data -> Maybe a) b ->
       data ->
       Maybe (Tuple2 a b)
    = /\a b ->
        \(`$dFromData` : (\a -> data -> Maybe a) a)
         (`$dFromData` : (\a -> data -> Maybe a) b)
         (d : data) ->
          let
            !d : data = d
          in
          matchData'
            {Maybe (Tuple2 a b)}
            d
            (\(index : integer) ->
               let
                 !index : integer = index
               in
               \(args : list data) ->
                 let
                   !args : list data = args
                   ~indexMatchCase : Maybe (Tuple2 a b)
                     = chooseList
                         {data}
                         {Unit -> Maybe (Tuple2 a b)}
                         args
                         (\(ds : Unit) -> Nothing {Tuple2 a b})
                         (\(ds : Unit) ->
                            let
                              !arg : data = head {data} args
                              !t : list data = tail {data} args
                            in
                            chooseList
                              {data}
                              {Unit -> Maybe (Tuple2 a b)}
                              t
                              (\(ds : Unit) -> Nothing {Tuple2 a b})
                              (\(ds : Unit) ->
                                 let
                                   !arg : data = head {data} t
                                   !t : list data = tail {data} t
                                 in
                                 matchList
                                   {data}
                                   {Maybe (Tuple2 a b)}
                                   t
                                   (Maybe_match
                                      {a}
                                      (`$dFromData` arg)
                                      {all dead. Maybe (Tuple2 a b)}
                                      (\(ipv : a) ->
                                         /\dead ->
                                           Maybe_match
                                             {b}
                                             (`$dFromData` arg)
                                             {all dead. Maybe (Tuple2 a b)}
                                             (\(ipv : b) ->
                                                /\dead ->
                                                  Just
                                                    {Tuple2 a b}
                                                    (Tuple2 {a} {b} ipv ipv))
                                             (/\dead -> Nothing {Tuple2 a b})
                                             {all dead. dead})
                                      (/\dead ->
                                         let
                                           !ds : Maybe b = `$dFromData` arg
                                         in
                                         Nothing {Tuple2 a b})
                                      {all dead. dead})
                                   (\(ds : data) (ds : list data) ->
                                      Nothing {Tuple2 a b}))
                              Unit)
                         Unit
                 in
                 ifThenElse
                   {unit -> Maybe (Tuple2 a b)}
                   (equalsInteger index 0)
                   (\(ds : unit) -> indexMatchCase)
                   (\(ds : unit) -> Nothing {Tuple2 a b})
                   unitval)
            (\(ds : list (pair data data)) -> Nothing {Tuple2 a b})
            (\(ds : list data) -> Nothing {Tuple2 a b})
            (\(ds : integer) -> Nothing {Tuple2 a b})
            (\(ds : bytestring) -> Nothing {Tuple2 a b})
  ~`$fFromDataTuple2` :
     all a b.
       (\a -> data -> Maybe a) a ->
       (\a -> data -> Maybe a) b ->
       (\a -> data -> Maybe a) (Tuple2 a b)
    = `$fFromDataTuple2_$cfromBuiltinData`
  ~`$fFromDataInteger_$cfromBuiltinData` : data -> Maybe integer
    = \(d : data) ->
        let
          !d : data = d
        in
        matchData'
          {Maybe integer}
          d
          (\(ds : integer) (ds : list data) -> Nothing {integer})
          (\(ds : list (pair data data)) -> Nothing {integer})
          (\(ds : list data) -> Nothing {integer})
          (\(i : integer) -> let !i : integer = i in Just {integer} i)
          (\(ds : bytestring) -> Nothing {integer})
  ~`$fFromDataInteger` : (\a -> data -> Maybe a) integer
    = `$fFromDataInteger_$cfromBuiltinData`
  ~`$dFromData` : (\a -> data -> Maybe a) (Tuple2 integer integer)
    = `$fFromDataTuple2`
        {integer}
        {integer}
        `$fFromDataInteger`
        `$fFromDataInteger`
  ~fromBuiltinData : all a. (\a -> data -> Maybe a) a -> data -> Maybe a
    = /\a -> \(v : (\a -> data -> Maybe a) a) -> v
in
\(ds : data) ->
  let
    !ds : data = ds
  in
  fromBuiltinData {Tuple2 integer integer} `$dFromData` ds